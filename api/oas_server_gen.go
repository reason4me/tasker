// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// Healthz implements healthz operation.
	//
	// Servers health check endpoint.
	//
	// GET /healthz
	Healthz(ctx context.Context) (*Healthy, error)
	// TasksGet implements GET /tasks operation.
	//
	// Returns list of all task.
	//
	// GET /tasks
	TasksGet(ctx context.Context) ([]Task, error)
	// TasksIDDelete implements DELETE /tasks/{id} operation.
	//
	// Delete  task.
	//
	// DELETE /tasks/{id}
	TasksIDDelete(ctx context.Context, params TasksIDDeleteParams) error
	// TasksIDGet implements GET /tasks/{id} operation.
	//
	// Returns task by id.
	//
	// GET /tasks/{id}
	TasksIDGet(ctx context.Context, params TasksIDGetParams) (*Task, error)
	// TasksIDPut implements PUT /tasks/{id} operation.
	//
	// Update task.
	//
	// PUT /tasks/{id}
	TasksIDPut(ctx context.Context, req *NewTask, params TasksIDPutParams) (*Task, error)
	// TasksPost implements POST /tasks operation.
	//
	// Create new task.
	//
	// POST /tasks
	TasksPost(ctx context.Context, req *NewTask) (*Task, error)
	// NewError creates *ErrorRespStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorRespStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
